auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=2)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=2)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=2)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
plot(delta)
plot(sort(delta), type="l)"
plot(sort(delta), type="l")
plot(sort(delta), type="l")
boxplot(sort(delta))
#initialize variables
num = 1
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=2,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=2)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=2)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=2)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
num = 1
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=3)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=3)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=3)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#initialize variables
num = 2
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=3)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=3)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=3)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#initialize variables
num = 3
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=3)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=3)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=3)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
aucobj
auc_obj
#initialize variables
num = 2
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=3)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=3)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=3)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
auc_obj
#initialize variables
num = 1
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
delta = read.table("~/Desktop/lab/classify/delta.txt")
delta = delta[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(delta, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
par(new=F)
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="blue", type="l", lwd=3)
#text(0.8, 0.15, paste("AUC: ",  format(aucobj@y.values, digits=2), sep=""), col="blue",cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
#get data
esdc = read.table("~/Desktop/lab/classify/eSDC.txt")
esdc = esdc[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
predobj = prediction(esdc, input[,1]!=num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="dark green", type="l", lwd=3)
#text(0.8, 0.1, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="dark green", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
auc_obj
#get data manual person 3
manual = as.numeric(output[,4]==num)
manual = manual[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5)]
predobj = prediction(as.vector(manual), input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
points(perfobj@x.values[[1]],perfobj@y.values[[1]], col="purple", type="l", lwd=3)
#text(0.8, 0.05, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), col="purple", cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
auc_obj
#get average error changes
data = input[,1]
error = c(sum(((data==1)+(as.numeric(rf$predicted)==2))==2)/sum(data==1),
sum(((data==1)+(as.numeric(rf$predicted)==3))==2)/sum(data==1),
sum(((data==2)+(as.numeric(rf$predicted)==1))==2)/sum(data==2),
sum(((data==2)+(as.numeric(rf$predicted)==3))==2)/sum(data==2),
sum(((data==3)+(as.numeric(rf$predicted)==1))==2)/sum(data==3),
sum(((data==3)+(as.numeric(rf$predicted)==2))==2)/sum(data==3))
t(t(error))
#get average error changes
data = input[,1]
error = c(sum(((data==1)+(as.numeric(rf$predicted)==2))==2)/sum(data==1),
sum(((data==1)+(as.numeric(rf$predicted)==3))==2)/sum(data==1),
sum(((data==2)+(as.numeric(rf$predicted)==1))==2)/sum(data==2),
sum(((data==2)+(as.numeric(rf$predicted)==3))==2)/sum(data==2),
sum(((data==3)+(as.numeric(rf$predicted)==1))==2)/sum(data==3),
sum(((data==3)+(as.numeric(rf$predicted)==2))==2)/sum(data==3))
t(t(error))
input
mutmap
colnames(input) = c("label", colnames(input)[2:ncol(input)])
input
mutmap = input
save(mutmap, file="~/Desktop/mutmap.rda")
ncol(mutmap)
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
mutmap
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
utmap
mutmap
write.csv2(mutmap, file="~/Desktop/mutmap.csv")
mutmap=cbind(mutmap,mutmap[,1])
write.csv2(mutmap, file="~/Desktop/mutmap.csv")
mutmap = data("mutmap")
mutmap[1,]
mutmap
data("mutmap")
mutmap
mutmap[1,]
write.table(mutmap, file="~/Desktop/mutmap.csv", sep=",")
write.table(cbind(mutmap, mutmap[,1]), file="~/Desktop/mutmap.csv", sep=",")
write.table(cbind(mutmap, mutmap[,1]), file="~/Desktop/mutmap.csv", sep=",")
write.table(cbind(mutmap, mutmap[,1]), file="~/Desktop/mutmap.csv", sep=",")
write.table(cbind(mutmap, mutmap[,1:2]), file="~/Desktop/mutmap.csv", sep=",")
