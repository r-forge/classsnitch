library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
library("ROCR")
data("shape_ex")
sample_shape = shape_ex
sample_shape
getFeatures(sample_shape[2:nrow(sample_shape),], base=sample_shape[1,], trim=5)
sample = sample_shape[2:nrow(sample_shape),]
base = sample_shape[1,]
trim=5
sample = as.matrix(sample)
margin = 1
norm = TRUE
noise = TRUE
trim = trim-1
tol = 0.1
append = F
samp_norm = normalize(sample, base)
base = (1.5*length(base)/sum(base, na.rm=T))*base
base[base<(-0.5)] = 0
samp_norm
base
high = boxplot(as.numeric(unlist(samp_norm)), plot=F)$stats[4]
samp_qual = reduceNoise(samp_norm, base, trim=trim, high=high)
pat = getPatternCC(samp_qual, base, tol=tol)
tw = getTimeWarping(samp_qual, base)
pat
tw
contig = getContiguous(samp_qual, base=base, tol=tol)
contig
nrow(tw)
nrow(pat)
length(pat)
length(tw)
length(contig)
mag = getMagCC(samp_qual, base)
length(mag)
var = getChangeVar(samp_qual, base=base, tol=tol)
length(var)
eSDC = getESDC(samp_qual, base)
length(eSDC)
range = getChangeRange(samp_qual, base=base, tol=tol)
length(range)
features = cbind(pat, tw, contig, mag, var, eSDC, range)
cbind(pat, tw, contig, mag, var, eSDC, range)
pat
tw
contig
eSDC
var
range
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
contig = getContiguous(samp_qual, base=base, tol=tol)
contig
contig = getContiguous(samp_qual, base=base, tol=tol)
#magnitude correlation coefficient
mag = getMagCC(samp_qual, base)
#change variance
var = getChangeVar(samp_qual, base=base, tol=tol)
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
sample
#pattern correlation coefficient
pat = getPatternCC(samp_qual, base, tol=tol)
#dynamic time warping
tw = getTimeWarping(samp_qual, base)
#change contiguousness
contig = getContiguous(samp_qual, base=base, tol=tol)
#magnitude correlation coefficient
mag = getMagCC(samp_qual, base)
#change variance
var = getChangeVar(samp_qual, base=base, tol=tol)
#experimental structural disruption coefficient
eSDC = getESDC(samp_qual, base)
#change range
range = getChangeRange(samp_qual, base=base, tol=tol)
cbind(pat)
cbind(pat, tw)
cbind(pat, tw, contig)
cbind(pat, tw, mag)
cbind(pat, tw, mag, var)
cbind(pat, tw, mag, var, eSDC)
cbind(pat, tw, mag, var, eSDC, range)
features = cbind(pat, tw, as.vector(contig), mag, var, eSDC, range)
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
contig = getContiguous(samp_qual, base=base, tol=tol)
contig
features = cbind(pat, tw, contig, mag, var, eSDC, range)
rownames(features) = rownames(sample)
colnames(features) = c("pattern change", "time warping", "change contiguousness", "magnitude change", "change variance", "eSDC", "range")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
data("mutmap")
sample = mutmap[,c(1,5:11)]
classes=1
data = sample
responses = data[,classes]
input = data[,5:11]
responses = data[,1]
input = data[,2:8]
responses
input
cutoff = rep(1/length(unique(responses[-which(is.na(responses))])), length(unique(responses[-which(is.na(responses))])))
cutoff
input = as.data.frame(cbind(responses, input))
rownames(input) = rownames(data)
colnames(input) = c("class", "pat", "tw", "contig", "mag", "var", "eSDC", "range")
if(sum(is.na(input[,1]), na.rm=T)>0){
input = input[-which(is.na(input[,1]),arr.ind=T),]
}
input[,1] = factor(as.numeric(input[,1]==1))
input
rf = randomForest(class~., data=input, importance=TRUE, proximity=TRUE, ntree=5001, cutoff=cutoff)
library("randomForest")
rf = randomForest(class~., data=input, importance=TRUE, proximity=TRUE, ntree=5001, cutoff=cutoff)
cutoff
class
data[1,]
data[,1]
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
data = mutmap[,c(1,5:11)]
responses = data[,1]
input = data[,2:8]
input = data[,2:11]
input = data[,2:8]
cutoff = rep(1/length(unique(responses[-which(is.na(responses))])), length(unique(responses[-which(is.na(responses))])))
input = as.data.frame(cbind(responses, input))
rownames(input) = rownames(data)
colnames(input) = c("class", "pat", "tw", "contig", "mag", "var", "eSDC", "range")
if(sum(is.na(input[,1]), na.rm=T)>0){
input = input[-which(is.na(input[,1]),arr.ind=T),]
}
input[,1] = factor(as.numeric(input[,1]==1))
input[,1]
input[,1] = factor(as.numeric(input[,1]))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
data("shape_ex")
sample_shape = shape_ex
sample = getFeatures(sample_shape[2:nrow(sample_shape),], base=sample_shape[1,], trim=5)
sample
sample[1,]
data("mutmap")
sample_class = mutmap[,c(1,5:11)]
cr = classifyRNA(sample_class, classes=1)
cr_pred = predict(cr, sample, type="response")
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#' data("shape_ex")
#' sample_shape = shape_ex
#' sample = getFeatures(sample_shape[2:nrow(sample_shape),], base=sample_shape[1,], trim=5)
#'
#' #predict change
#' data("mutmap")
#' sample_class = mutmap[,c(1,5:11)]
#' cr = classifyRNA(sample_class, classes=2)
#' cr_pred = predict(cr, sample, type="response")
#'
#' #plot ROC curve
#' col = 1
#' data("mutmap")
#' data = mutmap
#' data = data[-which(is.na(data[,col]),arr.ind=TRUE),]
#' predobj = prediction(cr$votes[,1], data[,col])
data("shape_ex")
sample_shape = shape_ex
sample = getFeatures(sample_shape[2:nrow(sample_shape),], base=sample_shape[1,], trim=5)
data("mutmap")
sample_class = mutmap[,c(1,5:11)]
cr = classifyRNA(sample_class, classes=2)
cr_pred = predict(cr, sample, type="response")
cr
cr_pred
sample_class = mutmap[,c(2,5:11)]
cr = classifyRNA(sample_class, classes=2)
cr_pred = predict(cr, sample, type="response")
col = 1
col = 1
data = mutmap
data = data[-which(is.na(data[,col]),arr.ind=TRUE),]
predobj = prediction(cr$votes[,1], data[,col])
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
col = 2
data("mutmap")
data = mutmap
data = data[-which(is.na(data[,col]),arr.ind=TRUE),]
predobj = prediction(cr$votes[,1], data[,col])
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@@x.values[[1]], perfobj@@y.values[[1]], lwd=2,
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
