#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
p = cbind(getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]), getL2norm(as.matrix(samp[2:nrow(samp),]),base=samp[1,]))
params = rbind(params, p)
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
#get prediction
rf = classifyRNA(input)
#initialize variables
num = 2
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="purple")
axis(side=2, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
axis(side=1, tck=-0.05, at=c(0.2,0.6,1), labels=c("","",""))
points(c(-1,2),c(-1,2), col="black", type="o", pch=21, lty=2)
#text(0.8, 0.2, paste("AUC: ", format(aucobj@y.values, digits=2), sep=""), cex=2)
auc_obj = c(auc_obj, aucobj@y.values)
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:11], na.rm=T)>(rowSums(!is.na(output[,2:11]))*0.5),]
input
input[1,]
input = cbind(man, params)
input[1,]
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
#get prediction
rf = classifyRNA(input)
rf = classifyRNA()
num = 2
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="purple")
aucobj
#initialize variables
num = 1
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="purple")
aucobj
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
p = cbind(getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]), getL2norm(as.matrix(samp[2:nrow(samp),]),base=samp[1,]))
params = rbind(params, p)
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install.packages('qpdf')
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
input
input[1,]
mutmap[1,]
rf = classifyRNA()
output[1,]
paramas[1,]
params[1,]
library("classSNitch")
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
#get prediction
rf = classifyRNA(input)
params[1,]
input
rf = classifyRNA()
mutmap
rf$importance
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
rf = classifyRNA(input)
input
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getL2norm(as.matrix(samp[2:nrow(samp),]), base=samp[1,]))#getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getL2norm(as.matrix(samp[2:nrow(samp),]), base=samp[1,]))#getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
warnings()
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getL2norm(as.matrix(samp[2:nrow(samp),]), base=as.matrix(samp[1,])))#getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
warnins()
warnings()
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
iinput
input
fies
files
x=3
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
mut
getL2norm(as.matrix(samp[2:nrow(samp),]), base=as.matrix(samp[1,]))
input
mutmap
input
getL2norm(as.matrix(samp[2:nrow(samp),]), base=as.matrix(samp[1,]))
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(sample),2]-sample[2,2]+1
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
params
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
params
getL2norm(as.matrix(samp[2:nrow(samp),]), base=as.matrix(samp[1,]))
input
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
params
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getL2norm(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getL2norm(as.matrix(samp[2:nrow(samp),]), base=samp[1,]))
}
warnings()
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
l2 = c(l2, getL2norm(as.matrix(samp[2:nrow(samp),]), base=samp[1,]))
}
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
l2 = NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
l2 = c(l2, getL2norm(as.matrix(samp[2:nrow(samp),]), base=samp[1,]))
}
l2
sum(is.na(l2))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#initialize variables
setwd("~/Desktop/lab/classify/RMDB_SHP/")
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
params=NULL
l2 = NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(as.matrix(samp[2:nrow(samp),]), tol=0.1, base=samp[1,]))
}
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = apply(manual, 1,mfv)
man = unlist(lapply(man, function(x) if(length(x)>1){min(x, na.rm=T)} else{x}))
output = as.matrix(read.table(f_manual), row.names=1)
output = cbind(man, output)
#build classifier set up
input = cbind(man, params)
input = input[rowSums(output[,1]==output[,2:10], na.rm=T)>(rowSums(!is.na(output[,2:10]))*0.5),]
input
rf = classifyRNA(input)
input
params
input
mutmap = input
save(mutmap, file="~/Desktop/mutmap.rda")
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
#initialize variables
num = 1
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="purple")
aucobj
#initialize variables
num = 2
auc_obj=NULL
#roc curves
predobj = prediction(rf$votes[,num], input[,1]==num)
perfobj = performance(predobj, 'tpr', 'fpr')
aucobj = performance(predobj, 'auc')
plot(perfobj@x.values[[1]], perfobj@y.values[[1]], lwd=3,
type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="purple")
aucobj
rf$importance
