install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
rf = classifyRNA(classes=1)
rf$confusion
rf = classifyRNA(classes=2)
rf$confusion
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
rf = classifyRNA(classes=1)
rf$confusion
rf = classifyRNA(classes=2)
rf$confusion
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
rf = classifyRNA(classes=1)
rf$confusion
rf = classifyRNA(classes=2)
rf$confusion
#initialize variables
setwd("~/Desktop/cSNitch/final/")
files = list.files("~/Desktop/cSNitch/final/")[c(2,3,5,7:11,13,14,17,18,22:24)]
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(samp),2]-sample[2,2]+1
params = rbind(params,  getFeatures(samp[2:nrow(samp),], point=mut, tol=0, window=5, base=samp[1,], trim=5))
}
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = as.numeric(predict(rf, params, resp="prob")[,2])
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
rf$confusion
rf = classifyRNA(classes=1)
rf$confusion
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
rf = classifyRNA(classes=2)
rf$confusion
rf = classifyRNA(classes=1)
rf$confusion
rf = classifyRNA(classes=1)
rf$confusion
5/7
files = list.files("~/Desktop/lab/classify/RMDB_SHP/")
f_manual = "~/Desktop/lab/classify/all_manual.txt"
#get manual consensus
manual = read.table(f_manual, row.names=1)
man = (as.numeric(rowSums((manual==1)+0, na.rm=T)/rowSums(!is.na(manual))))
sum((man>0.7)+(man<0.3)==1, na.rm=T)
man = (as.numeric(rowSums((manual==3)+0, na.rm=T)/rowSums(!is.na(manual))))
sum((man>0.7)+(man<0.3)==1, na.rm=T)
6/7
sum((man>0.85)+(man<0.15)==1, na.rm=T)
man = (as.numeric(rowSums((manual==1)+0, na.rm=T)/rowSums(!is.na(manual))))
sum((man>0.85)+(man<0.15)==1, na.rm=T)
#initialize variables
setwd("~/Desktop/cSnitch/evonne_data_compiled/")
files = list.files("~/Desktop/cSnitch/evonne_data_compiled/")
params = NULL
samp_trace = NULL
names = NULL
loc = 201
#get change parameters
for(x in 1:length(files)){
#read sample
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
#filter missing data
samp[1,is.na(samp[2,])] = NA
samp[2,is.na(samp[1,])] = NA
if((sum(is.na(samp[1,]))/ncol(samp)<0.9) && (!is.na(samp[1,loc])) && (!is.na(samp[2,loc]))){
#get paramaters
names = c(names, x)
mut = rep(loc, nrow(samp)-1)
rownames(samp) = paste0(substr(files[x], 1, nchar(files[x])-4),paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(samp[2:nrow(samp),], point=mut, window=5, base=samp[1,], trim=150, tol=1.5))
sample = t(as.matrix(samp[2:nrow(samp),]))
samp_norm = normalize(sample, base=samp[1,])
base = samp[1,]
base[base<(-0.5)] = 0
base = (1.5*sum(!is.na(base))/sum(base, na.rm=T))*base
samp_qual= reduceNoise(samp_norm, base=base, high=0.9, trim=150)
samp_trace = rbind(samp_trace, abs(base-samp_qual))
}
}
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred==0)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred==0)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#initialize variables
setwd("~/Desktop/cSNitch/final/")
files = list.files("~/Desktop/cSNitch/final/")[c(2,3,5,7:11,13,14,17,18,22:24)]
params=NULL
#get change parameters
for(x in 1:length(files)){
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
rownames(samp) = paste0(files[x],paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
mut = sample[2:nrow(samp),2]-sample[2,2]+1
params = rbind(params,  getFeatures(samp[2:nrow(samp),], point=mut, tol=0, window=5, base=samp[1,], trim=5))
}
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred!=1)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#initialize variables
setwd("~/Desktop/cSnitch/evonne_data_compiled/")
files = list.files("~/Desktop/cSnitch/evonne_data_compiled/")
params = NULL
samp_trace = NULL
names = NULL
loc = 201
#get change parameters
for(x in 1:length(files)){
#read sample
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
#filter missing data
samp[1,is.na(samp[2,])] = NA
samp[2,is.na(samp[1,])] = NA
if((sum(is.na(samp[1,]))/ncol(samp)<1) && (!is.na(samp[1,loc])) && (!is.na(samp[2,loc]))){
#get paramaters
names = c(names, x)
mut = rep(loc, nrow(samp)-1)
rownames(samp) = paste0(substr(files[x], 1, nchar(files[x])-4),paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(samp[2:nrow(samp),], point=mut, window=5, base=samp[1,], trim=150, tol=1.5))
sample = t(as.matrix(samp[2:nrow(samp),]))
samp_norm = normalize(sample, base=samp[1,])
base = samp[1,]
base[base<(-0.5)] = 0
base = (1.5*sum(!is.na(base))/sum(base, na.rm=T))*base
samp_qual= reduceNoise(samp_norm, base=base, high=0.9, trim=150)
samp_trace = rbind(samp_trace, abs(base-samp_qual))
}
}
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred==0)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
#initialize variables
setwd("~/Desktop/cSnitch/evonne_data_compiled/")
files = list.files("~/Desktop/cSnitch/evonne_data_compiled/")
params = NULL
samp_trace = NULL
names = NULL
loc = 201
#get change parameters
for(x in 1:length(files)){
#read sample
sample = read.table(files[x])
samp = as.matrix(sample[,3:ncol(sample)])
#filter missing data
samp[1,is.na(samp[2,])] = NA
samp[2,is.na(samp[1,])] = NA
if((sum(is.na(samp[1,]))/ncol(samp)<0.5) && (!is.na(samp[1,loc])) && (!is.na(samp[2,loc]))){
#get paramaters
names = c(names, x)
mut = rep(loc, nrow(samp)-1)
rownames(samp) = paste0(substr(files[x], 1, nchar(files[x])-4),paste(substr(x, 1, nchar(x)-4), sample[,1], sep="_"))
params = rbind(params, getFeatures(samp[2:nrow(samp),], point=mut, window=5, base=samp[1,], trim=150, tol=1.5))
sample = t(as.matrix(samp[2:nrow(samp),]))
samp_norm = normalize(sample, base=samp[1,])
base = samp[1,]
base[base<(-0.5)] = 0
base = (1.5*sum(!is.na(base))/sum(base, na.rm=T))*base
samp_qual= reduceNoise(samp_norm, base=base, high=0.9, trim=150)
samp_trace = rbind(samp_trace, abs(base-samp_qual))
}
}
params
#build classifier set up 2
rf = classifyRNA(classes=1)
rf_pred = predict(rf, params, resp="response")
#get changers
changers = sum(rf_pred==1)/length(rf_pred)
nonchangers = sum(rf_pred==0)/length(rf_pred)
#build classifier set up 3
rf = classifyRNA(classes=2)
rf_pred2 = predict(rf, params, resp="response")
#get global changers
global = sum(rf_pred2==1)/length(rf_pred2)
local = sum(((rf_pred==1)+(rf_pred2==0))==2)/length(rf_pred)
barplot(c(nonchangers, changers, local, global), names.arg=c("non-changers","changers","local","global"), ylab="% of total RNA", ylim=c(0,1))
setwd("~/Desktop/lab/classify/RMDB_SHP/")
library("classSNitch")
library("gplots")
library("ROCR")
library("agrmt")
library("miscTools")
library("RColorBrewer")
library("randomForest")
library("rpart")
library("rattle")
library("rpart.plot")
library("corrgram")
library("caret")
#install package
setwd("~/Desktop")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#create("classSNitch")
setwd("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
document()
devtools::use_package("randomForest")
devtools::use_package("dtw")
devtools::use_package("gplots")
devtools::use_package("ROCR")
load("~/Desktop/shape_ex.rda")
load("~/Desktop/mutmap.rda")
classify_default=mutmap
devtools::use_data(shape_ex, overwrite=T)
devtools::use_data(mutmap, overwrite=T)
devtools::use_data(classify_default, internal=T, overwrite=T)
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
mutmap
mutmap[,1]
unique(mutmap[-which(is.na(mutmap[,1])),1]))
unique(mutmap[-which(is.na(mutmap[,1])),1])
1/length(unique(mutmap[-which(is.na(mutmap[,1])),1]))
rep(1/length(unique(mutmap[-which(is.na(mutmap[,1])),1])), length(unique(mutmap[-which(is.na(mutmap[,1])),1])))
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
174-24
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
install("~/Documents/SVN_dir/classsnitch/pkg/classSNitch")
devtools::check()
